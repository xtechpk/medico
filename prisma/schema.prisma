generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  address        String
  city           String
  phoneNumber    String
  email          String           @unique
  employeeId     String           @unique
  password       String
  role           Role
  isActive       Boolean          @default(true)
  parentId       Int?             // Foreign key to reference the parent user
  parent         User?            @relation("UserEmployeeParent", fields: [parentId], references: [id], onDelete: SetNull)
  children       User[]           @relation("UserEmployeeParent") // Self-referencing relation for hierarchical structure
  medicalStore   MedicalStore?    @relation("UserMedicalStore")   // Relation to MedicalStore
  medicalStoreId Int?             // Foreign key to MedicalStore

  orders         Order[]          @relation("UserOrders")         
  auditLogs      AuditLog[]       // Relation to audit logs
  purchaseOrders PurchaseOrder[]  @relation("UserPurchaseOrders") 
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([email])                
  @@index([employeeId])           
}

model MedicalStore {
  id                Int                  @id @default(autoincrement())
  ownerId           Int                  @unique // Marked as unique to ensure a one-to-one relationship
  name              String
  address           String
  licenseNumber     String
  phoneNumber       String
  ntnNumber         String
  owner             User                 @relation("UserMedicalStore", fields: [ownerId], references: [id], onDelete: Cascade)
  medicines         MedicalStoreMedicine[] 
  locations         MedicineLocation[]   
  purchaseOrders    PurchaseOrder[]      
  stockTransactions StockTransaction[]   
  companies         Company[]            

  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  @@index([ownerId])                      
}

model Company {
  id               Int        @id @default(autoincrement())
  companyCode      String     
  name             String
  address          String
  phone            String?    
  mobile           String?    
  distributorCode  String
  isActive         Boolean          @default(true)
  ntnNo            String?    // Optional NTN number
  registrationDate DateTime   @default(now())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  medicines        Medicine[] // Relation to medicines
  medicalStoreId   Int        // Foreign key to MedicalStore
  medicalStore     MedicalStore @relation(fields: [medicalStoreId], references: [id], onDelete: Cascade)

  @@unique([companyCode, medicalStoreId]) // Composite unique constraint
  @@index([companyCode])                  // Index for faster lookups by companyCode
}

model Medicine {
  id            Int                      @id @default(autoincrement())
  name          String
  formula       String?
  description   String?
  minquantity   Int
  companyId     Int
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  isActive         Boolean          @default(true)
  company       Company                  @relation(fields: [companyId], references: [id])
  instances     MedicineInstance[]
  locations     MedicineLocation[]
  expiries      MedicineExpiry[]
  stores        MedicalStoreMedicine[]
  batches       Batch[]
  soldItems     SoldItems[]
  returnedItems ReturnedItems[]

  @@index([name])
  @@index([formula])
}

model MedicalStoreMedicine {
  id            Int           @id @default(autoincrement())
  medicalStoreId Int
  medicineId    Int
  quantity      Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  medicalStore  MedicalStore  @relation(fields: [medicalStoreId], references: [id])
  medicine      Medicine      @relation(fields: [medicineId], references: [id])

  @@index([medicalStoreId, medicineId])
}

model MedicineInstance {
  id            Int               @id @default(autoincrement())
  medicineId    Int
  batchId       Int?
  expiryDate    DateTime
  quantity      Int
  purchasePrice Float
  sellingPrice  Float
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  medicine      Medicine          @relation(fields: [medicineId], references: [id])
  batch         Batch?            @relation(fields: [batchId], references: [id])
  stockTransactions StockTransaction[]
  locations     MedicineLocation[] 

  @@index([medicineId])
  @@index([batchId])
}

model MedicineLocation {
  id              Int               @id @default(autoincrement())
  medicalStoreId  Int
  medicineId      Int
  medicineInstanceId Int
  location        String            
  rank            String?           
  quantity        Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  medicalStore    MedicalStore      @relation(fields: [medicalStoreId], references: [id])
  medicine        Medicine          @relation(fields: [medicineId], references: [id])
  medicineInstance MedicineInstance @relation(fields: [medicineInstanceId], references: [id])

  @@index([medicalStoreId, medicineId])
  @@index([medicineInstanceId])
}

model MedicineExpiry {
  id            Int       @id @default(autoincrement())
  medicineId    Int
  expiryDate    DateTime
  isNearExpiry  Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  medicine      Medicine  @relation(fields: [medicineId], references: [id])

  @@index([medicineId])
}

model Batch {
  id            Int               @id @default(autoincrement())
  serial        String            @unique
  purchaseOrderId Int?
  mfgDate       DateTime
  expiryDate    DateTime
  quantity      Int
  price         Float
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  purchaseOrder PurchaseOrder?    @relation(fields: [purchaseOrderId], references: [id])
  medicineInstances MedicineInstance[]
  medicine      Medicine?         @relation(fields: [medicineId], references: [id])
  medicineId    Int?              
  soldItems     SoldItems[]       
  returnedItems ReturnedItems[]   

  @@index([serial])
  @@index([medicineId])
}


model PurchaseOrder {
  id            Int               @id @default(autoincrement())
  medicalStoreId Int
  userId        Int               
  orderDate     DateTime
  status        String            @default("Pending")
  totalCost     Float
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  medicalStore  MedicalStore      @relation(fields: [medicalStoreId], references: [id])
  user          User              @relation("UserPurchaseOrders", fields: [userId], references: [id])
  batches       Batch[]
  stockTransactions StockTransaction[]

  @@index([medicalStoreId])
  @@index([userId])
}

model StockTransaction {
  id              Int               @id @default(autoincrement())
  medicalStoreId  Int
  medicineInstanceId Int
  purchaseOrderId Int?
  quantity        Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  medicalStore    MedicalStore      @relation(fields: [medicalStoreId], references: [id])
  medicineInstance MedicineInstance @relation(fields: [medicineInstanceId], references: [id])
  purchaseOrder   PurchaseOrder?    @relation(fields: [purchaseOrderId], references: [id])

  @@index([medicalStoreId])
  @@index([medicineInstanceId])
}

model Order {
  id               Int           @id @default(autoincrement())
  userId           Int
  customerId       Int?
  customerName     String?
  customerLocation String?
  customerContact  String?
  paymentMethod    PaymentMethod
  changeCash       Float?
  discount         Float?        @default(0.0)
  discountType     DiscountType?
  itemsCost        Float
  tax              Float?        @default(0.0)
  sellingPrice     Float
  profit           Float?
  bill             Float
  invoiceDate      DateTime      @default(now())
  status           String        @default("Paid")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation("UserOrders", fields: [userId], references: [id])
  customer         Customer?     @relation(fields: [customerId], references: [id])
  soldItems        SoldItems[]
  returnedItems    ReturnedItems[]

  @@index([userId])
  @@index([customerId])
}

model Customer {
  id            Int           @id @default(autoincrement())
  name          String
  phone         String?
  email         String?       @unique
  address       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orders        Order[]

  @@index([email])
}

model SoldItems {
  id            Int       @id @default(autoincrement())
  orderId       Int
  medicineId    Int
  batchId       Int?
  packing       String?
  quantity      Int
  retailPrice   Float
  discountPrice Float?
  margin        Float
  saleDate      DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  medicine      Medicine  @relation(fields: [medicineId], references: [id])
  order         Order     @relation(fields: [orderId], references: [id])
  batch         Batch?    @relation(fields: [batchId], references: [id])

  @@index([orderId])
  @@index([medicineId])
}

model ReturnedItems {
  id            Int       @id @default(autoincrement())
  orderId       Int
  medicineId    Int
  batchId       Int?
  packing       String?
  quantity      Int
  retailPrice   Float
  discountPrice Float?
  margin        Float
  returnType    ReturnType?
  returnedDate  DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  medicine      Medicine  @relation(fields: [medicineId], references: [id])
  order         Order     @relation(fields: [orderId], references: [id])
  batch         Batch?    @relation(fields: [batchId], references: [id])

  @@index([orderId])
  @@index([medicineId])
}

model AuditLog {
  id            Int       @id @default(autoincrement())
  userId        Int
  action        String    
  entity        String    
  entityId      Int       
  description   String?   
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity, entityId])
}

enum Role {
  SUPERADMIN
  ADMIN
  EMPLOYEE
}

enum PaymentMethod {
  CASH
  CARD
  CREDIT
}

enum DiscountType {
  CUSTOMER_DEMAND
  EMPLOYEE_BENEFIT
  GOVERNMENT_SERVANT
  PENSIONER
}

enum ReturnType {
  CUSTOMER_RETURN
  COMPANY_RETURN
}

