generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  address        String
  city           String
  phoneNumber    String
  email          String          @unique
  employeeId     String          @unique
  password       String
  role           Role
  isActive       Boolean         @default(true)
  parentId       Int? // Foreign key to reference the parent user
  parent         User?           @relation("UserEmployeeParent", fields: [parentId], references: [id], onDelete: SetNull)
  children       User[]          @relation("UserEmployeeParent") // Self-referencing relation for hierarchical structure
  medicalStore   MedicalStore?   @relation("UserMedicalStore") // Relation to MedicalStore
  medicalStoreId Int? // Foreign key to MedicalStore
  orders         Order[]         @relation("UserOrders")
  auditLogs      AuditLog[] // Relation to audit logs
  purchaseOrders PurchaseOrder[] @relation("UserPurchaseOrders")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([email])
  @@index([employeeId])
}

model MedicalStore {
  id                Int                    @id @default(autoincrement())
  ownerId           Int                    @unique
  name              String
  address           String
  licenseNumber     String
  phoneNumber       String
  ntnNumber         String
  owner             User                   @relation("UserMedicalStore", fields: [ownerId], references: [id], onDelete: Cascade)
  medicines         MedicalStoreMedicine[]
  locations         MedicineLocation[]
  purchaseOrders    PurchaseOrder[]
  stockTransactions StockTransaction[]
  companies         Company[]
  suppliers         Supplier[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  @@index([ownerId])
}

model Company {
  id               Int          @id @default(autoincrement())
  companyCode      String
  name             String
  address          String
  phone            String?
  mobile           String?
  distributorCode  String?
  ntnNumber        String?
  registrationDate DateTime     @default(now())
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  medicalStoreId   Int
  medicalStore     MedicalStore @relation(fields: [medicalStoreId], references: [id], onDelete: Cascade)
  suppliers        Supplier[]
  medicines        Medicine[]   @relation("CompanyMedicines")

  @@unique([companyCode, medicalStoreId])
  @@index([companyCode])
  @@index([medicalStoreId])
}

model Supplier {
  id              Int             @id @default(autoincrement())
  supplierCode    String?         @unique
  name            String
  email           String?
  phone           String?
  address         String
  distributorCode String
  ntnNumber       String?
  isActive        Boolean         @default(true)
  companyId       Int
  medicalStoreId  Int
  medicalStore    MedicalStore    @relation(fields: [medicalStoreId], references: [id], onDelete: Cascade)
  company         Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  medicines       Medicine[]
  purchaseOrders  PurchaseOrder[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([supplierCode, medicalStoreId])
  @@index([companyId])
  @@index([medicalStoreId])
}

model Medicine {
  id                    Int                    @id @default(autoincrement())
  name                  String
  formula               String?
  description           String?
  minquantity           Int
  companyId             Int
  supplierId            Int
  isActive              Boolean                @default(true)
  company               Company                @relation("CompanyMedicines", fields: [companyId], references: [id], onDelete: Cascade)
  supplier              Supplier               @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  variations            Variation[]
  locations             MedicineLocation[]
  medicalStoreMedicines MedicalStoreMedicine[]
  expiryRecords         MedicineExpiry[]
  soldItems             SoldItems[]
  returnedItems         ReturnedItems[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  @@index([companyId])
  @@index([supplierId])
}

model Variation {
  id           Int                @id @default(autoincrement())
  medicineId   Int
  potency      String
  packaging    String
  unitType     String
  unitsPerPack Int
  medicine     Medicine           @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  batches      Batch[]
  instances    MedicineInstance[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@index([medicineId])
}

model Batch {
  id              Int                @id @default(autoincrement())
  batchNo         String
  mfgDate         DateTime
  expiryDate      DateTime
  quantity        Int
  price           Float
  variationId     Int
  purchaseOrderId Int?
  variation       Variation          @relation(fields: [variationId], references: [id], onDelete: Cascade)
  purchaseOrder   PurchaseOrder?     @relation(fields: [purchaseOrderId], references: [id], onDelete: SetNull)
  instances       MedicineInstance[]
  soldItems       SoldItems[]
  returnedItems   ReturnedItems[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([variationId])
  @@index([purchaseOrderId])
}

model MedicineInstance {
  id                Int                @id @default(autoincrement())
  variationId       Int
  batchId           Int
  expiryDate        DateTime
  quantity          Int
  purchasePrice     Float
  sellingPrice      Float
  variation         Variation          @relation(fields: [variationId], references: [id], onDelete: Cascade)
  batch             Batch              @relation(fields: [batchId], references: [id], onDelete: Cascade)
  locations         MedicineLocation[]
  subunits          SubUnit[]
  stockTransactions StockTransaction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([variationId])
  @@index([batchId])
}

model SubUnit {
  id                   Int              @id @default(autoincrement())
  unitId               Int
  name                 String
  description          String?
  unitType             String
  subUnitCount         Int
  subUnitPrice         Float
  isSold               Boolean          @default(false)
  isReturnedByCustomer Boolean          @default(false)
  isReturnedToSupplier Boolean          @default(false)
  instance             MedicineInstance @relation(fields: [unitId], references: [id], onDelete: Cascade)
  soldItems            SoldItems[]
  returnedItems        ReturnedItems[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@index([unitId])
}

model MedicineLocation {
  id                 Int              @id @default(autoincrement())
  medicalStoreId     Int
  medicineId         Int
  medicineInstanceId Int
  location           String
  rank               String?
  quantity           Int
  medicalStore       MedicalStore     @relation(fields: [medicalStoreId], references: [id], onDelete: Cascade)
  medicine           Medicine         @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  instance           MedicineInstance @relation(fields: [medicineInstanceId], references: [id], onDelete: Cascade)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([medicalStoreId])
  @@index([medicineId])
  @@index([medicineInstanceId])
}

model MedicalStoreMedicine {
  id             Int          @id @default(autoincrement())
  medicalStoreId Int
  medicineId     Int
  quantity       Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  medicalStore   MedicalStore @relation(fields: [medicalStoreId], references: [id], onDelete: Cascade)
  medicine       Medicine     @relation(fields: [medicineId], references: [id], onDelete: Cascade)

  @@unique([medicalStoreId, medicineId])
  @@index([medicalStoreId])
  @@index([medicineId])
}

model MedicineExpiry {
  id           Int      @id @default(autoincrement())
  medicineId   Int
  expiryDate   DateTime
  isNearExpiry Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  medicine     Medicine @relation(fields: [medicineId], references: [id], onDelete: Cascade)

  @@unique([medicineId, expiryDate])
  @@index([medicineId])
}

model StockTransaction {
  id                 Int              @id @default(autoincrement())
  medicalStoreId     Int
  medicineInstanceId Int
  purchaseOrderId    Int?
  quantity           Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  medicalStore       MedicalStore     @relation(fields: [medicalStoreId], references: [id], onDelete: Cascade)
  medicineInstance   MedicineInstance @relation(fields: [medicineInstanceId], references: [id], onDelete: Cascade)
  purchaseOrder      PurchaseOrder?   @relation(fields: [purchaseOrderId], references: [id], onDelete: SetNull)

  @@index([medicalStoreId])
  @@index([medicineInstanceId])
  @@index([purchaseOrderId])
}

model PurchaseOrder {
  id                Int                @id @default(autoincrement())
  medicalStoreId    Int
  supplierId        Int?
  userId            Int
  orderDate         DateTime
  status            String             @default("Pending")
  totalCost         Float
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  medicalStore      MedicalStore       @relation(fields: [medicalStoreId], references: [id], onDelete: Cascade)
  supplier          Supplier?          @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  user              User               @relation("UserPurchaseOrders", fields: [userId], references: [id], onDelete: Cascade)
  batches           Batch[]
  stockTransactions StockTransaction[]

  @@index([medicalStoreId])
  @@index([supplierId])
  @@index([userId])
}

model Order {
  id               Int             @id @default(autoincrement())
  userId           Int
  customerId       Int?
  customerName     String?
  customerLocation String?
  customerContact  String?
  paymentMethod    PaymentMethod
  changeCash       Float?
  discount         Float?          @default(0.0)
  discountType     DiscountType?
  itemsCost        Float
  tax              Float?          @default(0.0)
  sellingPrice     Float
  profit           Float?
  bill             Float
  invoiceDate      DateTime        @default(now())
  status           String          @default("Paid")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  user             User            @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  customer         Customer?       @relation(fields: [customerId], references: [id], onDelete: SetNull)
  soldItems        SoldItems[]
  returnedItems    ReturnedItems[]

  @@index([userId])
  @@index([customerId])
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String?
  email     String?  @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@index([email])
}

model SoldItems {
  id            Int      @id @default(autoincrement())
  orderId       Int
  medicineId    Int
  batchId       Int?
  subUnitId     Int?
  packing       String?
  quantity      Int
  retailPrice   Float
  discountPrice Float?
  margin        Float
  saleDate      DateTime @default(now())
  updatedAt     DateTime @updatedAt
  medicine      Medicine @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  batch         Batch?   @relation(fields: [batchId], references: [id], onDelete: SetNull)
  subUnit       SubUnit? @relation(fields: [subUnitId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@index([medicineId])
  @@index([batchId])
  @@index([subUnitId])
}

model ReturnedItems {
  id            Int        @id @default(autoincrement())
  orderId       Int
  medicineId    Int
  batchId       Int?
  subUnitId     Int?
  packing       String?
  quantity      Int
  retailPrice   Float
  discountPrice Float?
  margin        Float
  returnType    ReturnType
  returnedDate  DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  medicine      Medicine   @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  order         Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  batch         Batch?     @relation(fields: [batchId], references: [id], onDelete: SetNull)
  subUnit       SubUnit?   @relation(fields: [subUnitId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@index([medicineId])
  @@index([batchId])
  @@index([subUnitId])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  action      String
  entity      String
  entityId    Int
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entity, entityId])
}

enum Role {
  SUPERADMIN
  ADMIN
  EMPLOYEE
}

enum PaymentMethod {
  CASH
  CARD
  CREDIT
}

enum DiscountType {
  CUSTOMER_DEMAND
  EMPLOYEE_BENEFIT
  GOVERNMENT_SERVANT
  PENSIONER
}

enum ReturnType {
  CUSTOMER_RETURN
  COMPANY_RETURN
}
